{"filter":false,"title":"cifrado-cesar.py","tooltip":"/cifrado-cesar.py","undoManager":{"mark":19,"position":19,"stack":[[{"start":{"row":0,"column":0},"end":{"row":2,"column":25},"action":"insert","lines":["def getDoubleAlphabet(alphabet):","    doubleAlphabet = alphabet + alphabet","    return doubleAlphabet"],"id":33}],[{"start":{"row":2,"column":25},"end":{"row":3,"column":0},"action":"insert","lines":["",""],"id":34},{"start":{"row":3,"column":0},"end":{"row":3,"column":4},"action":"insert","lines":["    "]},{"start":{"row":3,"column":4},"end":{"row":4,"column":0},"action":"insert","lines":["",""]},{"start":{"row":4,"column":0},"end":{"row":4,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":4,"column":0},"end":{"row":4,"column":4},"action":"remove","lines":["    "],"id":35}],[{"start":{"row":4,"column":0},"end":{"row":6,"column":26},"action":"insert","lines":["def getMessage():","    stringToEncrypt = input(\"Please enter a message to encrypt: \")","    return stringToEncrypt"],"id":36}],[{"start":{"row":6,"column":26},"end":{"row":7,"column":0},"action":"insert","lines":["",""],"id":37},{"start":{"row":7,"column":0},"end":{"row":7,"column":4},"action":"insert","lines":["    "]},{"start":{"row":7,"column":4},"end":{"row":8,"column":0},"action":"insert","lines":["",""]},{"start":{"row":8,"column":0},"end":{"row":8,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":8,"column":0},"end":{"row":8,"column":4},"action":"remove","lines":["    "],"id":38}],[{"start":{"row":8,"column":0},"end":{"row":10,"column":22},"action":"insert","lines":["def getCipherKey():","    shiftAmount = input( \"Please enter a key (whole number from 1-25): \")","    return shiftAmount"],"id":39}],[{"start":{"row":10,"column":22},"end":{"row":11,"column":0},"action":"insert","lines":["",""],"id":40},{"start":{"row":11,"column":0},"end":{"row":11,"column":4},"action":"insert","lines":["    "]},{"start":{"row":11,"column":4},"end":{"row":12,"column":0},"action":"insert","lines":["",""]},{"start":{"row":12,"column":0},"end":{"row":12,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":12,"column":0},"end":{"row":12,"column":4},"action":"remove","lines":["    "],"id":41}],[{"start":{"row":12,"column":0},"end":{"row":31,"column":0},"action":"insert","lines":["# Obtener la clave de cifrado","def getCipherKey():","    shiftAmount = input( \"Please enter a key (whole number from 1-25): \")","    return shiftAmount","","# Función para cifrar","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = \"\"","    uppercaseMessage = message.upper()","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + int(cipherKey)","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage","",""],"id":42}],[{"start":{"row":20,"column":0},"end":{"row":20,"column":25},"action":"remove","lines":["    uppercaseMessage = \"\""],"id":43},{"start":{"row":19,"column":25},"end":{"row":20,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":13,"column":0},"end":{"row":15,"column":22},"action":"remove","lines":["def getCipherKey():","    shiftAmount = input( \"Please enter a key (whole number from 1-25): \")","    return shiftAmount"],"id":44},{"start":{"row":12,"column":29},"end":{"row":13,"column":0},"action":"remove","lines":["",""]},{"start":{"row":12,"column":28},"end":{"row":12,"column":29},"action":"remove","lines":["o"]},{"start":{"row":12,"column":27},"end":{"row":12,"column":28},"action":"remove","lines":["d"]},{"start":{"row":12,"column":26},"end":{"row":12,"column":27},"action":"remove","lines":["a"]},{"start":{"row":12,"column":25},"end":{"row":12,"column":26},"action":"remove","lines":["r"]},{"start":{"row":12,"column":24},"end":{"row":12,"column":25},"action":"remove","lines":["f"]},{"start":{"row":12,"column":23},"end":{"row":12,"column":24},"action":"remove","lines":["i"]},{"start":{"row":12,"column":22},"end":{"row":12,"column":23},"action":"remove","lines":["c"]},{"start":{"row":12,"column":21},"end":{"row":12,"column":22},"action":"remove","lines":[" "]},{"start":{"row":12,"column":20},"end":{"row":12,"column":21},"action":"remove","lines":["e"]},{"start":{"row":12,"column":19},"end":{"row":12,"column":20},"action":"remove","lines":["d"]},{"start":{"row":12,"column":18},"end":{"row":12,"column":19},"action":"remove","lines":[" "]},{"start":{"row":12,"column":17},"end":{"row":12,"column":18},"action":"remove","lines":["e"]},{"start":{"row":12,"column":16},"end":{"row":12,"column":17},"action":"remove","lines":["v"]},{"start":{"row":12,"column":15},"end":{"row":12,"column":16},"action":"remove","lines":["a"]},{"start":{"row":12,"column":14},"end":{"row":12,"column":15},"action":"remove","lines":["l"]},{"start":{"row":12,"column":13},"end":{"row":12,"column":14},"action":"remove","lines":["c"]},{"start":{"row":12,"column":12},"end":{"row":12,"column":13},"action":"remove","lines":[" "]},{"start":{"row":12,"column":11},"end":{"row":12,"column":12},"action":"remove","lines":["a"]},{"start":{"row":12,"column":10},"end":{"row":12,"column":11},"action":"remove","lines":["l"]},{"start":{"row":12,"column":9},"end":{"row":12,"column":10},"action":"remove","lines":[" "]},{"start":{"row":12,"column":8},"end":{"row":12,"column":9},"action":"remove","lines":["r"]},{"start":{"row":12,"column":7},"end":{"row":12,"column":8},"action":"remove","lines":["e"]},{"start":{"row":12,"column":6},"end":{"row":12,"column":7},"action":"remove","lines":["n"]},{"start":{"row":12,"column":5},"end":{"row":12,"column":6},"action":"remove","lines":["e"]}],[{"start":{"row":12,"column":4},"end":{"row":12,"column":5},"action":"remove","lines":["t"],"id":45},{"start":{"row":12,"column":3},"end":{"row":12,"column":4},"action":"remove","lines":["b"]},{"start":{"row":12,"column":2},"end":{"row":12,"column":3},"action":"remove","lines":["O"]},{"start":{"row":12,"column":1},"end":{"row":12,"column":2},"action":"remove","lines":[" "]},{"start":{"row":12,"column":0},"end":{"row":12,"column":1},"action":"remove","lines":["#"]}],[{"start":{"row":14,"column":0},"end":{"row":26,"column":0},"action":"remove","lines":["# Función para cifrar","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = message.upper()","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + int(cipherKey)","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage",""],"id":46},{"start":{"row":14,"column":0},"end":{"row":29,"column":0},"action":"insert","lines":["# Función para cifrar","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\" # inicializamos el mensaje cifrado como vacio","    uppercaseMessage = message.upper()","    for currentCharacter in uppercaseMessage:","        # Encuentro la posición o índice en el alfabeto","        position = alphabet.find(currentCharacter)","        # Encontrar la nueva posición en el alfabeto gracias a nuestra clave","        newPosition = position + int(cipherKey)","        # Verifico el caracter exista para encriptar","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else: # Si no existe el caracter se devuelve igual","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage",""]}],[{"start":{"row":30,"column":0},"end":{"row":53,"column":24},"action":"insert","lines":["# Función principal","def runCaesarCipherProgram():","    # Defino el alfabeto","    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","    print(f'Alfabeto: {myAlphabet}')","    myAlphabet2 = getDoubleAlphabet(myAlphabet)","    print(f'Alfabeto2: {myAlphabet2}')","    # Pido el mensaje a cifrar","    myMessage = getMessage()","    print(myMessage)","    # Pido la clave","    myCipherKey = getCipherKey()","    print(myCipherKey)","    ","    # Encripto","    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)","    print(f'Encrypted Message: {myEncryptedMessage}')","    ","    # Desencripto","    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)","    print(f'Decypted Message: {myDecryptedMessage}')","","","runCaesarCipherProgram()"],"id":47}],[{"start":{"row":29,"column":0},"end":{"row":30,"column":0},"action":"insert","lines":["",""],"id":48},{"start":{"row":30,"column":0},"end":{"row":31,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":30,"column":0},"end":{"row":33,"column":56},"action":"insert","lines":["# Desencripto utilizando la llave de forma negativa","def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, decryptKey, alphabet)"],"id":49}],[{"start":{"row":58,"column":24},"end":{"row":59,"column":0},"action":"insert","lines":["",""],"id":50},{"start":{"row":59,"column":0},"end":{"row":60,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":60,"column":0},"end":{"row":69,"column":71},"action":"insert","lines":["# Defino el alfabeto","myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","print(f'Alfabeto: {myAlphabet}')","myAlphabet2 = getDoubleAlphabet(myAlphabet)","print(f'Alfabeto2: {myAlphabet2}')","#myCipherKey = 10","","for myCipherKey in range(1, 26):","    myDecryptedMessage = decryptMessage(\"KYWXEZS TVIWMHIRXI\", myCipherKey, myAlphabet2)","    print(f'{myCipherKey} Mensaje desencriptado: {myDecryptedMessage}')"],"id":51}],[{"start":{"row":14,"column":0},"end":{"row":28,"column":27},"action":"remove","lines":["# Función para cifrar","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\" # inicializamos el mensaje cifrado como vacio","    uppercaseMessage = message.upper()","    for currentCharacter in uppercaseMessage:","        # Encuentro la posición o índice en el alfabeto","        position = alphabet.find(currentCharacter)","        # Encontrar la nueva posición en el alfabeto gracias a nuestra clave","        newPosition = position + int(cipherKey)","        # Verifico el caracter exista para encriptar","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else: # Si no existe el caracter se devuelve igual","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage"],"id":52},{"start":{"row":14,"column":0},"end":{"row":28,"column":27},"action":"insert","lines":["# Función para cifrar","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\" # inicializamos el mensaje cifrado como vacio","    uppercaseMessage = message.upper()","    for currentCharacter in uppercaseMessage:","        # Encuentro la posición o índice en el alfabeto","        position = alphabet.find(currentCharacter)","        # Encontrar la nueva posición en el alfabeto gracias a nuestra clave","        newPosition = position + int(cipherKey)","        # Verifico el caracter exista para encriptar","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else: # Si no existe el caracter se devuelve igual","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":17,"column":30},"end":{"row":17,"column":30},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1733163357251,"hash":"8ca8dd646b63700360c29492deb37c49b127b54f"}